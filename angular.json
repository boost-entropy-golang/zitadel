{"sections":[{"html":"<div style=\"display: flex; align-items: center;\">\n    <img src=\"logos/zitadel-logo-solo-darkdesign.svg\" height=\"160px\" alt=\"zitadel\"/>\n    <i style=\"font-size: 40px; height: 40px;  margin: 0 15px;\" class=\"las la-plus\"></i>\n    <img src=\"tech/angular.svg\" height=\"200px\" alt=\"angular\"/>\n</div>\n\n<p>This Integration guide shows you the recommended way to integrate <strong>ZITADEL</strong> into your Angular Application.\nIt demonstrates how to add a user login to your application and fetch some data from the user info endpoint.</p>\n<p>At the end of the guide you should have an application able to login a user and read the user profile.</p>\n<blockquote>\n<p>This documentation refers to our <a href=\"https://github.com/caos/zitadel-angular-template\" target=\"_blank\">Template</a> in Github. Note that our <strong>ZITADEL Console</strong> is also written in Angular and can therefore be used as a reference.</p>\n</blockquote>\n","metadata":{"title":"Angular"},"subsections":[],"slug":"Angular","file":"00-overview.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Setup_Application_and_get_Keys\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Setup_Application_and_get_Keys\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tSetup Application and get Keys\n\t\t\t\t\t</h3><p>Before we can start building our application we have do do a few configuration steps in ZITADEL Console.\nYou will need to provide some information about your app. We recommend creating a new app to start from scratch. Navigate to your <a href=\"https://console.zitadel.ch/projects\" target=\"_blank\">Project</a> and add a new application at the top of the page.\nSelect Web Application and continue.\nWe recommend that you use <a href=\"architecture#Authorization_Code\">Authorization Code</a> in combination with <a href=\"architecture#Proof_Key_for_Code_Exchange\">Proof Key for Code Exchange</a> for all web applications.</p>\n<img src=\"img/angular/app-create-light.png\" height=\"260px\" alt=\"create app in console\"/>\n\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Redirect_URLs\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Redirect_URLs\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tRedirect URLs\n\t\t\t\t\t</h4><p>A redirect URL is a URL in your application where ZITADEL redirects the user after they have authenticated. Set your url to the domain the web app will be deployed to or use <code>localhost:4200</code> for development as Angular will be running on port 4200.</p>\n<blockquote>\n<p>If you are following along with the <a href=\"https://github.com/caos/zitadel-angular-template\" target=\"_blank\">sample</a> project you downloaded from our templates, you should set the Allowed Callback URL to <a href=\"http://localhost:4200/auth/callback\" target=\"_blank\" title=\"undefined\">http://localhost:4200/auth/callback</a>. You will also have to set dev mode to <code>true</code> as this will enable unsecure http for the moment.</p>\n</blockquote>\n<p>If you want to redirect the users back to a route on your application after they have logged out, add an optional redirect in the post redirectURI field.</p>\n<p>Continue and Create the application.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id=\"Client_ID_and_Secret\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Client_ID_and_Secret\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tClient ID and Secret\n\t\t\t\t\t</h4><p>After successful app creation a popup will appear showing you your clientID as well as a secret.\nCopy your client ID as it will be needed in the next step.</p>\n","metadata":{"title":"Configure Zitadel"},"subsections":[{"slug":"Setup_Application_and_get_Keys","title":"Setup Application and get Keys","level":3},{"slug":"Redirect_URLs","title":"Redirect URLs","level":4},{"slug":"Client_ID_and_Secret","title":"Client ID and Secret","level":4}],"slug":"Configure_Zitadel","file":"01-configure.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Install_Angular_dependencies\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Install_Angular_dependencies\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tInstall Angular dependencies\n\t\t\t\t\t</h3><p>You need to install an oauth / oidc client to connect with ZITADEL. Run the following command:</p>\n<div class=''><pre class='language-bash'><code>npm install angular-oauth2-oidc</code></pre></div><p>This library helps integrating ZITADEL Authentication in your Angular Application.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Create_and_configure_Auth_Module\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Create_and_configure_Auth_Module\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tCreate and configure Auth Module\n\t\t\t\t\t</h3><p>Add the Auth module to your Angular imports in AppModule and setup the AuthConfig in a constant above.</p>\n<div class=''><pre class='language-undefined'><code>...\n<span class=\"hljs-keyword\">import</span> { AuthConfig, OAuthModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;angular-oauth2-oidc&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> authConfig: AuthConfig = {\n\t<span class=\"hljs-attr\">scope</span>: <span class=\"hljs-string\">&#x27;openid profile email&#x27;</span>,\n\t<span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">&#x27;code&#x27;</span>,\n\t<span class=\"hljs-attr\">oidc</span>: <span class=\"hljs-literal\">true</span>,\n\t<span class=\"hljs-attr\">clientId</span>: <span class=\"hljs-string\">&#x27;YOUR-CLIENT-ID&#x27;</span>, <span class=\"hljs-comment\">// replace with your appid</span>\n\t<span class=\"hljs-attr\">dummyClientSecret</span>: <span class=\"hljs-string\">&#x27;YOUR-SECRET&#x27;</span>, <span class=\"hljs-comment\">// required by library</span>\n\t<span class=\"hljs-attr\">issuer</span>: <span class=\"hljs-string\">&#x27;https://issuer.zitadel.ch&#x27;</span>,\n\t<span class=\"hljs-attr\">redirectUri</span>: <span class=\"hljs-string\">&#x27;http://localhost:4200/auth/callback&#x27;</span>,\n\t<span class=\"hljs-attr\">postLogoutRedirectUri</span>: <span class=\"hljs-string\">&#x27;http://localhost:4200/signedout&#x27;</span>, <span class=\"hljs-comment\">// optional</span>\n\t<span class=\"hljs-attr\">requireHttps</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// required for running locally</span>\n};\n\n<span class=\"hljs-meta\">@NgModule</span>({\n\t<span class=\"hljs-attr\">declarations</span>: [\n\t\tAppComponent,\n\t\tSignedoutComponent,\n\t],\n\t<span class=\"hljs-attr\">imports</span>: [\n\t\tOAuthModule..forRoot(),\n...</code></pre></div><p>Set <strong>openid</strong>, <strong>profile</strong> and <strong>email</strong> as scope, <strong>code</strong> as responseType, and oidc to <strong>true</strong>.\nThen create a Authentication Service to provide the functions to authenticate your user.</p>\n<p>You can use Angulars schematics to do so:</p>\n<div class=''><pre class='language-bash'><code>ng g component services/authentication</code></pre></div><p>This will create an AuthenticationService automatically for you.</p>\n<p>Copy the following code to your service. This code provides a function <code>authenticate()</code> which redirects the user to ZITADEL. After the user has logged in it will be redirected back to your redirectURI set in Auth Module and Console. Make sure both correspond, otherwise ZITADEL will throw an error.</p>\n<div class=''><pre class='language-undefined'><code><span class=\"hljs-keyword\">import</span> { AuthConfig, OAuthService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;angular-oauth2-oidc&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthenticationService</span> </span>{\n\t<span class=\"hljs-keyword\">private</span> _authenticated: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span>;\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> _authenticationChanged: BehaviorSubject&lt;\n\t\t<span class=\"hljs-built_in\">boolean</span>\n\t&gt; = <span class=\"hljs-keyword\">new</span> BehaviorSubject(<span class=\"hljs-built_in\">this</span>.authenticated);\n\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">\n\t\t<span class=\"hljs-keyword\">private</span> oauthService: OAuthService,\n\t\t<span class=\"hljs-keyword\">private</span> authConfig: AuthConfig,\n\t\t<span class=\"hljs-keyword\">private</span> statehandler: StatehandlerService,\n\t</span>)</span> { }\n\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">authenticated</span>(): <span class=\"hljs-title\">boolean</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._authenticated;\n\t}\n\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">authenticationChanged</span>(): <span class=\"hljs-title\">Observable</span>&lt;<span class=\"hljs-title\">boolean</span>&gt; {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._authenticationChanged;\n\t}\n\n\t<span class=\"hljs-keyword\">public</span> getOIDCUser(): Observable&lt;<span class=\"hljs-built_in\">any</span>&gt; {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">from</span>(<span class=\"hljs-built_in\">this</span>.oauthService.loadUserProfile());\n\t}\n\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> authenticate(\n\t\tsetState: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span>,\n\t): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt; {\n\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;auth&#x27;</span>);\n\t\t<span class=\"hljs-built_in\">this</span>.oauthService.configure(<span class=\"hljs-built_in\">this</span>.authConfig);\n\n\t\t<span class=\"hljs-built_in\">this</span>.oauthService.strictDiscoveryDocumentValidation = <span class=\"hljs-literal\">false</span>;\n\t\t<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.oauthService.loadDiscoveryDocumentAndTryLogin();\n\n\t\t<span class=\"hljs-built_in\">this</span>._authenticated = <span class=\"hljs-built_in\">this</span>.oauthService.hasValidAccessToken();\n\n\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.oauthService.hasValidIdToken() || !<span class=\"hljs-built_in\">this</span>.authenticated) {\n\t\t\t<span class=\"hljs-keyword\">const</span> newState = setState ? <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.statehandler.createState().toPromise() : <span class=\"hljs-literal\">undefined</span>;\n\t\t\t<span class=\"hljs-built_in\">this</span>.oauthService.initCodeFlow(newState);\n\t\t}\n\t\t<span class=\"hljs-built_in\">this</span>._authenticationChanged.next(<span class=\"hljs-built_in\">this</span>.authenticated);\n\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.authenticated;\n\t}\n\n\t<span class=\"hljs-keyword\">public</span> signout(): <span class=\"hljs-built_in\">void</span> {\n\t\t<span class=\"hljs-built_in\">this</span>.oauthService.logOut();\n\t\t<span class=\"hljs-built_in\">this</span>._authenticated = <span class=\"hljs-literal\">false</span>;\n\t\t<span class=\"hljs-built_in\">this</span>._authenticationChanged.next(<span class=\"hljs-literal\">false</span>);\n\t}\n}</code></pre></div><p>Our template includes a statehandler service to redirect the user back to the route where he initially came from. It saves the route information to a unique id so that the user can be redirected back after a successful authentication.\nIf you don&#39;t need such a behaviour you can escape the following lines from the <code>authenticate()</code> method above.</p>\n<div class=''><pre class='language-undefined'><code>...\n<span class=\"hljs-keyword\">const</span> newState = setState ? <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.statehandler.createState().toPromise() : <span class=\"hljs-literal\">undefined</span>;\n...</code></pre></div><p>If you decide to use it provide the service in the <code>app.module</code> and make sure it gets initialized first using angulars <code>APP_INITIALIZER</code>.</p>\n<div class=''><pre class='language-undefined'><code>\n<span class=\"hljs-keyword\">const</span> stateHandlerFn = <span class=\"hljs-function\">(<span class=\"hljs-params\">stateHandler: StatehandlerService</span>) =&gt;</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n\t\t<span class=\"hljs-keyword\">return</span> stateHandler.initStateHandler();\n\t};\n};\n\n...\n<span class=\"hljs-attr\">providers</span>: [\n\t\t{\n\t\t\t<span class=\"hljs-attr\">provide</span>: APP_INITIALIZER,\n\t\t\t<span class=\"hljs-attr\">useFactory</span>: stateHandlerFn,\n\t\t\t<span class=\"hljs-attr\">multi</span>: <span class=\"hljs-literal\">true</span>,\n\t\t\t<span class=\"hljs-attr\">deps</span>: [StatehandlerService],\n\t\t},\n\t\t{\n\t\t\t<span class=\"hljs-attr\">provide</span>: StatehandlerProcessorService,\n\t\t\t<span class=\"hljs-attr\">useClass</span>: StatehandlerProcessorServiceImpl,\n\t\t},\n\t\t{\n\t\t\t<span class=\"hljs-attr\">provide</span>: StatehandlerService,\n\t\t\t<span class=\"hljs-attr\">useClass</span>: StatehandlerServiceImpl,\n\t\t},\n]\n...</code></pre></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Add_Login_in_your_application\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Add_Login_in_your_application\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tAdd Login in your application\n\t\t\t\t\t</h3><p>To login a user, a component or a guard is needed. </p>\n<ul>\n<li><p>A component provides a button prompting the user to start the login flow.\n<code>authenticate()</code> redirects your user to ZITADEL.ch for authentication. Upon successfull Authentication, ZITADEL will redirect the user back to your previously defined Redirect URL.</p>\n</li>\n<li><p>A guard can be setup to check if the user has a valid <strong>Access Token</strong> to proceed. This will check if the user has a stored <strong>accesstoken</strong> in storage or otherwise prompt the user to login.</p>\n</li>\n</ul>\n<p>The use of this components totally depends on your application. In most cases you need both.</p>\n<p>To create a component use </p>\n<div class=''><pre class='language-bash'><code>ng g component components/login</code></pre></div><p>and then inject the authService to call <code>authenticate()</code>.</p>\n<p>Same for the guard:</p>\n<div class=''><pre class='language-bash'><code>ng g guard guards/auth</code></pre></div><p>This code shows the AuthGuard used in our Console.</p>\n<div class=''><pre class='language-undefined'><code><span class=\"hljs-keyword\">import</span> { AuthService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;src/app/services/auth.service&#x27;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>({\n\t<span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthGuard</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">CanActivate</span> </span>{\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> auth: AuthService</span>)</span> { }\n\n\t<span class=\"hljs-keyword\">public</span> canActivate(\n\t\t_: ActivatedRouteSnapshot,\n\t\t<span class=\"hljs-attr\">state</span>: RouterStateSnapshot,\n\t): Observable&lt;<span class=\"hljs-built_in\">boolean</span>&gt; | <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt; | <span class=\"hljs-built_in\">boolean</span> {\n\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.auth.authenticated) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.auth.authenticate();\n\t\t}\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.auth.authenticated;\n\t}\n}</code></pre></div><p>it can easily be added to your RouterModule.</p>\n<div class=''><pre class='language-undefined'><code>...\n<span class=\"hljs-keyword\">const</span> routes: Routes = [\n\t{\n\t\t<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n\t\t<span class=\"hljs-attr\">loadChildren</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;./pages/home/home.module&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> m.HomeModule),\n\t\t<span class=\"hljs-attr\">canActivate</span>: [AuthGuard],\n\t},\n...</code></pre></div><blockquote>\n<p>Note: To complete the code flow, <code>authenticate()</code> needs to be called twice. You may have to add a guard to your callback url to make sure it will complete the flow.</p>\n</blockquote>\n<div class=''><pre class='language-undefined'><code>\t{\n\t\t<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;auth/callback&#x27;</span>,\n\t\t<span class=\"hljs-attr\">canActivate</span>: [AuthGuard],\n\t\t<span class=\"hljs-attr\">redirectTo</span>: <span class=\"hljs-string\">&#x27;user&#x27;</span>,\n\t},</code></pre></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Add_Logout_in_your_application\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Add_Logout_in_your_application\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tAdd Logout in your application\n\t\t\t\t\t</h3><p>The authService and Library also provides a useful function for logging out your users. Just call <code>auth.signout()</code> to log out your user. Note that you can also configure your Logout Redirect URL if you want your Users to be redirected after logout.</p>\n<div class=''><pre class='language-undefined'><code><span class=\"hljs-keyword\">import</span> { AuthService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;src/app/services/auth.service.ts&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeComponentWithLogout</span> </span>{\n\t<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> authService: AuthService</span>)</span>{}\n\n\t<span class=\"hljs-keyword\">public</span> signout(): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.authService.signout();\n\t}\n}</code></pre></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Show_User_Information\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Show_User_Information\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tShow User Information\n\t\t\t\t\t</h3><p>To fetch user data, ZITADELS user info endpoint has to be called. This data contains sensitive information and artifacts related to your users identity and the scopes you defined in your Auth Config.\nOur AuthService already includes a function called getOIDCUser(). You can call it whereever you need this information.</p>\n<div class=''><pre class='language-undefined'><code><span class=\"hljs-keyword\">import</span> { AuthenticationService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;src/app/services/auth.service.ts&#x27;</span>;\n\n<span class=\"hljs-keyword\">public</span> user$: Observable&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> auth: AuthenticationService</span>)</span> {\n\t<span class=\"hljs-built_in\">this</span>.user$ = <span class=\"hljs-built_in\">this</span>.auth.getOIDCUser();\n}</code></pre></div><p>and in your html</p>\n<div class=''><pre class='language-markup'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;user$ | async as user&quot;</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{user | json}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div>","metadata":{"title":"Angular Setup"},"subsections":[{"slug":"Install_Angular_dependencies","title":"Install Angular dependencies","level":3},{"slug":"Create_and_configure_Auth_Module","title":"Create and configure Auth Module","level":3},{"slug":"Add_Login_in_your_application","title":"Add Login in your application","level":3},{"slug":"Add_Logout_in_your_application","title":"Add Logout in your application","level":3},{"slug":"Show_User_Information","title":"Show User Information","level":3}],"slug":"Angular_Setup","file":"02-code.md"},{"html":"<p>You have successfully integrated ZITADEL in your Angular Application! </p>\n<p>If you get stuck consider checking out our <a href=\"https://github.com/caos/zitadel-angular-template\" target=\"_blank\">template</a> application which includes all the mentioned functionality of this quickstart. You can simply start by cloning the repo and replacing the AuthConfig in the app.module with your own configuration. If your run into issues don&#39;t hesitate to contact us or raise an issue on <a href=\"https://github.com/caos/zitadel\" target=\"_blank\">Github</a>.</p>\n<img src=\"img/angular/app-screen.png\" height=\"260px\" alt=\"create app in console\"/>\n\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Whats_next\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"angular#Whats_next\" class=\"anchor\" aria-hidden=\"true\"><i class=\"las la-link\"></i></a>\n\t\t\t\t\t\tWhats next?\n\t\t\t\t\t</h3><p>Now you can proceed implementing our APIs to include Authorization. Refer to our <a href=\"apis#Authentication_API\">Docs</a> or checkout our Console Code on <a href=\"https://github.com/caos/zitadel\" target=\"_blank\">Github</a> which is using GRPC to access data.</p>\n<p>For more information about creating an angular application we refer to <a href=\"https://angular.io/start\" target=\"_blank\">Angular</a> and for more information about the used oauth/oidc library consider reading their docs at <a href=\"https://github.com/manfredsteyer/angular-oauth2-oidc\" target=\"_blank\">angular-oauth2-oidc</a>.</p>\n","metadata":{"title":"Completion"},"subsections":[{"slug":"Whats_next","title":"Whats next?","level":3}],"slug":"Completion","file":"03-end.md"}],"seo":""}